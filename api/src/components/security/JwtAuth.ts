import { Request, Response } from 'express';import { jwtConfig } from '../../config';const jwt = require('express-jwt');export class JwtAuth{    required: any;    optional: any;    // TODO: include expiration validation    constructor()    {        this.required = jwt({            algorithms: [jwtConfig.algorithm],            secret: jwtConfig.secret,            issuer: jwtConfig.issuer,            getToken: this.getTokenFromHeaders()        });        this.optional = jwt({            algorithms: [jwtConfig.algorithm],            secret: jwtConfig.secret,            issuer: jwtConfig.issuer,            getToken: this.getTokenFromHeaders(),            credentialsRequired: false        });    }    getTokenFromHeaders = () => {        return function (request: Request) {            const {headers: {authorization}}: any = request;            // get the token from Bearer Token            if (authorization && authorization.split(' ')[0] === 'Bearer') {                return authorization.split(' ')[1];            }            return null;        }    };    authenticationErrorHandler(error: any, request: Request, response: Response, next: any)    {        if(error.name === 'UnauthorizedError') {            response                .status(error.status)                .send({ message: error.message });        }        next();    };}