import { Entity, Column, OneToMany, OneToOne } from 'typeorm';import { BaseEntity } from './BaseEntity';import { Hub } from './Hub';import { TemperatureReading } from './TemperatureReading';import {Field, ObjectType} from 'type-graphql';@ObjectType()@Entity({ name: 'sensors' })export class Sensor extends BaseEntity{    @Field()    @Column({ nullable: false })    name!: string;    @Field()    @Column({ nullable: false })    serial!: string;    @Field()    @Column({ name: 'curent_temp', type: 'decimal', nullable: false })    currentTemp!: number;    @Field()    @Column({ name: 'signal_strength', nullable: false })    signalStrength!: number;    @Field()    @Column({ name: 'battery_status', nullable: false })    batteryStatus!: number;    @Field()    @Column({ name: 'is_connected', type: 'smallint', nullable: false, default: 0 })    isConnected!: number;    @Field()    @Column()    description!: string;    @Field()    @Column()    type!: string;    @OneToOne(() => Hub, hub => hub.sensor, { cascade: ['insert', 'update'] })    hub!: Hub;    @OneToMany(() => TemperatureReading, temperatureReading => temperatureReading.sensor)    temperatureReadings!: TemperatureReading[];}