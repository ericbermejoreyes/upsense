import { jwtConfig } from '../../../config';import { Admin } from '../../shared/entities/Admin';import { getRepository, Repository } from 'typeorm';import { RefreshToken } from '../../shared/entities/RefreshToken';const jwt = require('jsonwebtoken');export class TokenProviderService{    private tokenRepo: Repository<RefreshToken>    constructor() {        this.tokenRepo = getRepository(RefreshToken);    }    generateAccessToken(admin: Admin)    {        // create and sign the access token        return jwt.sign(            this.createUserPayload(admin),            jwtConfig.secret,        {                issuer: jwtConfig.issuer,                algorithm: jwtConfig.algorithm,                expiresIn: jwtConfig.expiry            });    }    async generateRefreshToken(admin: Admin)    {        //create and sign the refresh token        const token = jwt.sign(            {},            jwtConfig.refreshSecret,        {                issuer: jwtConfig.issuer,                algorithm: jwtConfig.algorithm,                expiresIn: jwtConfig.refreshExpiry            });        let refreshToken: RefreshToken | undefined = await this.tokenRepo.findOne({where: {admin}});        if (!refreshToken) {            // create new refresh token if nothing exist            refreshToken = new RefreshToken();            refreshToken.admin = admin;        }        refreshToken.token = token;        admin.refreshToken = refreshToken;        await this.tokenRepo.save(refreshToken);        return token;    }    private createUserPayload(admin: Admin)    {        return {           user: {               picture: admin.picture,               username: admin.username,               firstName: admin.firstName,               lastName: admin.lastName,               id: admin.id,               role: admin.role,           }        }    }    public async verifyRefreshToken(token: string, decoded = null, error = '')    {        try {            decoded = jwt.verify(token, jwtConfig.refreshSecret)            return true;        } catch (e: any) {            error = e.message;            return false;        }    }}