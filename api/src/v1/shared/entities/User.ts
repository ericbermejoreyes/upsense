import {Column, Entity, BeforeInsert, OneToMany, ManyToMany, OneToOne, JoinColumn, JoinTable, ManyToOne} from 'typeorm';import { ObjectType, Field } from 'type-graphql';import { Audit } from './Audit';import { Zone } from './Zone';import { BaseEntity } from './BaseEntity';import hash from '../../../components/helpers/Hash';import { RefreshToken } from './RefreshToken';import {UserRoleTypes} from "../../../components/types/UserRoleTypes";import {Company} from "./Company";import {NotificationSetting} from "./NotificationSetting";const crypto = require('crypto');/** * The User Entity, this entity holds data for User, Manager and User */@ObjectType()@Entity({ name: 'users' })export class User extends BaseEntity{    @Column({ type: 'enum', enum: ['admin', 'manager', 'user'], nullable: false, default: 'user'})    role!: UserRoleTypes;    @Field(() => String)    @Column({ type: 'text', unique: true, nullable: true })    username!: string;    @Column({ type: 'text', unique: false, nullable: false })    password!: string;    @Column({ type: 'text', nullable: false})    salt!: string;    @Field(() => String, { nullable: true })    @Column({ type: 'text', nullable: true, default: '' })    image?: string;    @Field(() => String)    @Column({ type: 'text', nullable: false, default: '', name: 'first_name' })    firstName!: string;    @Field(() => String)    @Column({ type: 'text', nullable: false, default: '', name: 'last_name' })    lastName!: string;    @Field(() => String)    @Column({ type: 'text', unique: true, nullable: false, default: '' })    email!: string;    @Field(() => String, { nullable: true })    @Column({ type: 'text', nullable: true, name: 'mobile', unique: true })    mobile?: string;    @OneToOne(() => RefreshToken, refreshToken => refreshToken.user, { onDelete: 'SET NULL', cascade: ['insert', 'update'] })    @JoinColumn({name: 'refresh_token_id'})    refreshToken!: RefreshToken;    @OneToMany(() => Audit, audit => audit.user)    audits!: Audit[];    @ManyToOne(() => Company, company => company.users, { onDelete: 'CASCADE', cascade: ['insert', 'update'] })    @JoinColumn({name: 'company_id'})    company!: Company;    @OneToOne(() => NotificationSetting, notificationSetting => notificationSetting.user, {onDelete: 'SET NULL', cascade: ['insert', 'update']})    notificationSetting!: NotificationSetting;    @ManyToMany(() => Zone, zone => zone.users, {onDelete: 'NO ACTION', cascade: ['insert', 'update'] })    @JoinTable({        name: 'user_zones',        joinColumn: {            name: 'user',            referencedColumnName: 'id'        },        inverseJoinColumn: {            name: 'zone',            referencedColumnName: 'id'        }    })    zones!: Zone[];    /**     * Before inserting the data, generate the salt and hash the password     */    @BeforeInsert()    hashPassword()    {        this.salt = crypto.randomBytes(16).toString('hex');        this.password = hash.password(this.password, this.salt);    }    /**     * Validate if the password provided matched     * @param password     */    validatePassword(password: string)    {        return this.password === hash.password(password, this.salt);    }    public serialize()    {        let serialized: any = {            id: this.id,            username: this.username,            firstName: this.firstName,            lastName: this.lastName,            email: this.email,            mobile: this.mobile,            image: this.image,            updatedAt: this.updatedAt,            createdAt: this.createdAt        };        if (this.company) {            serialized.company = this.company.serialize();        }        if (this.zones) {            serialized.zones = this.zones.map(zone => zone.serialize());        }        return serialized;    }}