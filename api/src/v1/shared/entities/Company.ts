import {Entity, Column, JoinColumn, OneToMany} from 'typeorm';import { ObjectType, Field } from 'type-graphql';import { BaseEntity } from './BaseEntity';import { Branch } from './Branch';import {Zone} from "./Zone";import {User} from "./User";@ObjectType()@Entity({ name: 'companies' })export class Company extends BaseEntity{    @Field(() => String)    @Column({ type: 'text', nullable: false, default: '', unique: true })    name!: string;    @OneToMany(() => Zone, zone => zone.company, { onDelete: 'RESTRICT', cascade: ['insert', 'update'] })    zones!: Zone[];    @OneToMany(() => User, user => user.company, { onDelete: 'SET NULL' })    users!: User[];    public serialize()    {        return {            id: this.id,            name: this.name,            updateAt: this.updatedAt,            createdAt: this.createdAt        };    }}