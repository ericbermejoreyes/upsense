import {Entity, Column, JoinColumn, OneToMany} from 'typeorm';import { ObjectType, Field } from 'type-graphql';import { BaseEntity } from './BaseEntity';import { Branch } from './Branch';import {Zone} from "./Zone";import {User} from "./User";@ObjectType()@Entity({ name: 'companies' })export class Company extends BaseEntity {    @Field(() => String)    @Column({type: 'text', nullable: false, default: '', unique: true})    name!: string;    @OneToMany(() => Zone, zone => zone.company, {onDelete: 'SET NULL', cascade: ['insert', 'update']})    zones!: Zone[];    @OneToMany(() => User, user => user.company, {onDelete: 'SET NULL', cascade: ['insert', 'update']})    users!: User[];    public serialize() {        let serialized: any = {            id: this.id,            name: this.name,            updateAt: this.updatedAt,            createdAt: this.createdAt        };        if (this.zones) {            serialized.zones = this.zones.map(zone => zone.serialize());        }        if (this.users) {            serialized.users = this.users.map(user => user.serialize());        }        return serialized;    }}