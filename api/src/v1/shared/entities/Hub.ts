import { Entity, Column, ManyToOne, OneToOne } from 'typeorm';import { BaseEntity } from './BaseEntity';import { Zone } from './Zone';import { Sensor } from './Sensor';import {Field} from "type-graphql";@Entity({ name: 'hubs' })export class Hub extends BaseEntity{    @Column()    serial!: string;    @Column({ name: 'hw_version', nullable: false, default: '' })    hwVersion!: string    @Column({ name: 'fw_version', nullable: false, default: '' })    fwVersion!: string    @Column({ name: 'min_temp', default: 0 })    minTemp!: number    @Column({ name: 'max_temp', default: 0 })    maxTemp!: number    @Column({ name: 'is_connected', type: 'tinyint', default: 0})    isConnected!: number;    @Column({ name: 'signal_strength', type: 'mediumint', default: 0})    signalStrength!: number;    @Column({ name: 'battery_status', type: 'mediumint', default: 0})    batteryStatus!: number;    @Column()    type!: string    @Column()    imei!: string    @Field()    @Column({ name: 'last_seen', nullable: true })    lastSeen!: string;    @ManyToOne(() => Zone, zone => zone.hubs)    zone!: Zone;    @OneToOne(() => Sensor, sensor => sensor.hub, { cascade: true })    sensor!: Sensor;}