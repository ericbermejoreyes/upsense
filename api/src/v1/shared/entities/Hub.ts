import { Entity, Column, ManyToOne, OneToMany } from 'typeorm';import { BaseEntity } from './BaseEntity';import { Zone } from './Zone';import { Sensor } from './Sensor';import {Field, Int} from "type-graphql";@Entity({ name: 'hubs' })export class Hub extends BaseEntity{    @Column({nullable: false})    name!: string    @Column({nullable: false, unique: true})    serial!: string    @Column({ name: 'hw_version', nullable: false, default: '' })    hwVersion!: string    @Column({ name: 'fw_version', nullable: false, default: '' })    fwVersion!: string    @Column({ name: 'is_connected', type: 'tinyint', default: 0})    isConnected!: number;    @Column({ name: 'signal_strength', type: 'mediumint', default: 0})    signalStrength!: number;    @Column({ default: '' })    type!: string    @Column({ default: '' })    imei!: string    @Field(() => Int)    @Column({ type: 'bigint', name: 'last_seen', default: null })    lastSeen!: number;    @ManyToOne(() => Zone, zone => zone.hubs)    zone!: Zone;    @OneToMany(() => Sensor, sensor => sensor.hub, { cascade: ['insert', 'update'], onDelete: 'SET NULL' })    sensors!: Sensor[];    serialize()    {        let serialized: any = {            id: this.id,            name: this.name,            serial: this.serial,            isConnected: this.isConnected,            lastSeen: this.lastSeen,            createdAt: this.createdAt,            updatedAt: this.updatedAt        }        if (this.zone) {            serialized.zone = this.zone.serialize();        }        if (this.sensors) {            serialized.sensors = this.sensors.map((sensor: Sensor) => sensor.serialize())        }        return serialized;    }}