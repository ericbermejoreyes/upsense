import { Entity, Column, OneToMany, OneToOne } from 'typeorm';import { BaseEntity } from './BaseEntity';import { Hub } from './Hub';import { SensorReading } from './SensorReading';import {Field, ObjectType} from 'type-graphql';import {Log} from "./Log";@ObjectType()@Entity({ name: 'sensors' })export class Sensor extends BaseEntity{    @Field()    @Column({ nullable: false, default: '' })    name!: string;    @Field()    @Column({ nullable: false, unique: true })    serial!: string;    @Field()    @Column({ name: 'current_temp', type: 'double', nullable: false, default: 0 })    currentTemp!: number;    @Field()    @Column({ name: 'battery_status', type: 'double', nullable: false, default: 0 })    batteryStatus!: number;    @Field()    @Column({ name: 'is_connected', type: 'tinyint', nullable: false, default: 0 })    isConnected!: number;    @Field()    @Column({ default: '' })    description!: string;    @Field()    @Column({ default: '' })    type!: string;    @Field()    @Column({ name: 'last_seen', nullable: true })    lastSeen!: string;    @OneToOne(() => Hub, hub => hub.sensor, { cascade: ['insert', 'update'] })    hub!: Hub;    @OneToMany(() => SensorReading, sensorReading => sensorReading.sensor, { cascade: ['insert', 'update'], onDelete: 'SET NULL' })    sensorReadings!: SensorReading[];    @OneToMany(() => Log, log => log.sensor, { cascade: ['insert', 'update'], onDelete: 'SET NULL' })    logs!: Log[];}