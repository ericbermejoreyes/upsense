import {Entity, Column, ManyToOne, PrimaryGeneratedColumn, BeforeInsert, BeforeUpdate} from 'typeorm';import { BaseEntity } from './BaseEntity';import { Sensor } from './Sensor';import {Field, ID, Int} from "type-graphql";import moment from "moment";@Entity({ name: 'sensor_readings' })export class SensorReading extends BaseEntity{    @Column({ default: 0, type: 'double' })    temperature!: number;    @Column({ default: 0, type: 'double' })    humidity!: number;    @Column({ nullable: true, default: null, type: 'double' })    battery!: number;    @Field(() => Int)    @Column({ type: 'bigint', default: null })    timestamp!: number;    @ManyToOne(() => Sensor, sensor => sensor.sensorReadings, { onDelete: 'CASCADE' })    sensor!: Sensor;    serialize()    {        let serialized: any = {            temperature: this.temperature,            humidity: this.humidity,            battery: this.battery,            timestamp: this.timestamp,        }        if (this.sensor) {            serialized.sensor = this.sensor.serialize();        }        return serialized;    }}