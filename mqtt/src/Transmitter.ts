import mqtt from 'mqtt';import moment from 'moment';import { mqttConfig } from './config';import DHTSensor from './DHTSensor';const MQTT_OPTIONS = {    port: mqttConfig.port,    host: mqttConfig.host,    protocol: mqttConfig.protocol,    // username: mqttConfig.username,    // password: mqttConfig.password,    rejectUnauthorized: false,};export class Transmitter{    client: any = null;    topic: string;    tick: any = null;    interval: number = 3000;    dhtSensor: DHTSensor;    env: string;    constructor(topic: string)    {        this.env = process.env.NODE_ENV || 'development';        this.topic = topic;        this.dhtSensor = new DHTSensor({ readInterval: 3 });    }    start()    {        this.connect(() => {            if (this.env === 'development') {                this.dhtSensor.read((data: any) => {                    console.log(JSON.parse(data));                    this.send(data);                });            }        });        return this;    }    connect(connectionCallback = () => {}) {        this.client = mqtt.connect(MQTT_OPTIONS);        this.client.on('connect', () => {            console.log('Transmitter connection to the MQTT broker: OK')            connectionCallback();        });        this.client.on('error', (err: any) => {            console.log(`An error occurred. ${err}`);        });        this.client.on('disconnect', () => {            console.log('Transmitter disconnected to the MQTT broker');            // clear the interval on disconnect            clearInterval(this.tick);        });        return this;    }    send(message: string)    {        this.client.publish(this.topic, message, (err: any) => {           if (err) {               // console.log('An error occurred while trying to publish a message. Err: ' + err);           } else {               // console.log('Successully');           }        });        return this;    }    stop(cb = () => {})    {        if (this.env === 'development') {            this.dhtSensor.stop();        }    }}